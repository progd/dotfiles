" NeoBundle configure {{{
if has('vim_starting')
  if &compatible
    set nocompatible               " Be iMproved
  endif

  set runtimepath+=~/.vim/bundle/neobundle.vim/
endif

call neobundle#begin(expand('~/.vim/bundle'))

" Let NeoBundle manage NeoBundle
NeoBundleFetch 'Shougo/neobundle.vim'

" Plugins
NeoBundle 'Shougo/vimproc.vim', {
\ 'build' : {
\     'windows' : 'tools\\update-dll-mingw',
\     'cygwin' : 'make -f make_cygwin.mak',
\     'mac' : 'make -f make_mac.mak',
\     'linux' : 'make',
\     'unix' : 'gmake',
\    },
\ }
NeoBundle 'Shougo/unite.vim'
NeoBundle 'Shougo/unite-outline'
NeoBundle 'Shougo/neomru.vim'
NeoBundle 'Shougo/neocomplete.vim'
NeoBundle 'Shougo/vimfiler'
NeoBundle 'Shougo/vimshell'
NeoBundle 'Shougo/unite-help'
NeoBundle 'vim-scripts/kwbdi.vim'
NeoBundle 'itchyny/lightline.vim'
NeoBundle 'marcus/rsense'
NeoBundle 'supermomonga/neocomplete-rsense.vim'
NeoBundle 'scrooloose/syntastic'
NeoBundle 'thinca/vim-ref'
NeoBundle 'yuku-t/vim-ref-ri'
NeoBundle 'szw/vim-tags'
NeoBundle 'tpope/vim-endwise'
NeoBundle 'tyru/open-browser.vim'
NeoBundle 'thinca/vim-quickrun'
NeoBundle 'slim-template/vim-slim'

call neobundle#end()

filetype plugin indent on

NeoBundleCheck
" }}}

" General settings {{{
let OSTYPE = system('uname')

let mapleader = ","

" シンタックスハイライト有効、暗い背景用
"syntax on
set background=dark

" Installation check.
NeoBundleCheck

" 行番号を表示
set number

" ステータスライン
set laststatus=2

" タブ・インデント設定
set tabstop=4
set shiftwidth=4
set expandtab
set autoindent
set cindent

" 検索
set ignorecase
set smartcase
set incsearch
set hlsearch

" 対応する括弧を強調
set showmatch

" バックアップファイルを作成しない
set nobackup

set visualbell
set t_vb = ""

" 自動改行しない
set textwidth=0

syntax enable
" }}}

" Filetypes {{{
" md as markdown, instead of modula2
augroup MyAutoGroup
    autocmd!
    autocmd BufNewFile,BufRead *.{md,mdwn,mkd,mkdn,mark*} set filetype=markdown
augroup END
" ruby
compiler ruby
let ruby_space_errors=1
" }}}

" Keymaps {{{
" emacs-like keybind
noremap! <C-a>  <Home>
noremap! <C-e>  <End>
noremap! <C-b>  <Left>
noremap! <C-f>  <Right>
cnoremap <C-p>  <Up>
cnoremap <C-n>  <Down>

" unite.vim keymap
nnoremap          <leader>u  :<C-u>Unite -no-split<Space>
nnoremap <silent> <leader>f  :<C-u>Unite<Space>buffer<CR>
nnoremap <silent> <leader>b  :<C-u>Unite<Space>bookmark<CR>
nnoremap <silent> <leader>m  :<C-u>Unite<Space>file_mru<CR>
nnoremap <silent> <leader>r  :<C-u>UniteWithBufferDir file<CR>
nnoremap <silent> <leader>vr :<C-u>UniteResume<CR>
nnoremap <silent> <leader>o  :<C-u>Unite -winwidth=40 -vertical -no-quit outline<CR>
nnoremap <silent> <leader>h  :<C-u>Unite help<CR>
nnoremap <silent> <leader>g  :<C-u>UniteWithBufferDir file_rec/async:!<CR>

" vimfiler keymap
nnoremap <silent> <leader>e  :<C-u>VimFilerBufferDir -find<CR>
nnoremap <silent> <leader>t  :<C-u>VimFilerBufferDir -find -winwidth=40 -split -simple -no-quit<CR>

" neocomplete
inoremap <expr><C-g>     neocomplete#undo_completion()
inoremap <expr><C-l>     neocomplete#complete_common_string()

" <CR>: close popup and save indent.
inoremap <silent> <CR> <C-r>=<SID>my_cr_function()<CR>
function! s:my_cr_function()
  return neocomplete#close_popup() . "\<CR>"
endfunction
" <TAB>: completion.
inoremap <expr><TAB>  pumvisible() ? "\<C-n>" : "\<TAB>"
" <C-h>, <BS>: close popup and delete backword char.
inoremap <expr><C-h> neocomplete#smart_close_popup()."\<C-h>"
inoremap <expr><BS> neocomplete#smart_close_popup()."\<C-h>"
inoremap <expr><C-y>  neocomplete#close_popup()
inoremap <expr><C-e>  neocomplete#cancel_popup()

" kwbdi
nmap <leader>d <Plug>Kwbd

" QuickRun
nnoremap <silent> <leader>q :QuickRun -outputter/buffer/split ":botright 8sp"<CR>

" vimshell
nnoremap <silent> <leader>s :VimShell<CR>
" }}}

" Plugins {{{
"" neocomplete {{{
" Use neocomplete.
let g:neocomplete#enable_at_startup = 1
" Use smartcase.
let g:neocomplete#enable_smart_case = 1
" Set minimum syntax keyword length.
let g:neocomplete#sources#syntax#min_keyword_length = 3
let g:neocomplete#lock_buffer_name_pattern = '\*ku\*'

" Define dictionary.
let g:neocomplete#sources#dictionary#dictionaries = {
      \ 'default' : '',
      \ 'vimshell' : $HOME.'/.vimshell_hist',
      \ 'scheme' : $HOME.'/.gosh_completions'
      \ }

" Define keyword.
if !exists('g:neocomplete#keyword_patterns')
  let g:neocomplete#keyword_patterns = {}
endif
let g:neocomplete#keyword_patterns['default'] = '\h\w*'

" Enable omni completion.
autocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS
autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
autocmd FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS
autocmd FileType python setlocal omnifunc=pythoncomplete#Complete
autocmd FileType xml setlocal omnifunc=xmlcomplete#CompleteTags

" Enable heavy omni completion.
if !exists('g:neocomplete#sources#omni#input_patterns')
  let g:neocomplete#sources#omni#input_patterns = {}
endif
let g:neocomplete#sources#omni#input_patterns.php = '[^. \t]->\h\w*\|\h\w*::'
let g:neocomplete#sources#omni#input_patterns.c = '[^.[:digit:] *\t]\%(\.\|->\)'
let g:neocomplete#sources#omni#input_patterns.cpp = '[^.[:digit:] *\t]\%(\.\|->\)\|\h\w*::'
let g:neocomplete#sources#omni#input_patterns.ruby = '[^.*\t]\.\w*\|\h\w*::'

" For perlomni.vim setting.
" https://github.com/c9s/perlomni.vim
let g:neocomplete#sources#omni#input_patterns.perl = '\h\w*->\h\w*\|\h\w*::'

let g:neocomplete#sources#rsense#home_directory = '/usr/local'
"" }}}

"" vimfiler {{{
" デフォルトのファイルエクスプローラにする
let g:vimfiler_as_default_explorer = 1
" セーフモード無効
let g:vimfiler_safe_mode_by_default = 0
"" }}}

"" QuickRun {{{
let g:quickrun_config = {
      \   '_': {
      \     'runner' : 'vimproc',
      \     'runner/vimproc/updatetime' : 60
      \   },
      \   'markdown' : {
      \       'type': 'pandoc',
      \       'outputter': 'browser'
      \   },
      \ }
"" }}}

"" syntastic, rubocop {{{
" syntastic_mode_mapをactiveにするとバッファ保存時にsyntasticが走る
" active_filetypesに、保存時にsyntasticを走らせるファイルタイプを指定する
let g:syntastic_mode_map = { 'mode': 'passive', 'active_filetypes': ['ruby'] }
let g:syntastic_ruby_checkers = ['rubocop']
let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0
"" }}}

"" vimshell {{{
if OSTYPE == "Darwin\n"
  let g:vimshell_editor_command = "/usr/local/bin/vim"
endif
let g:vimshell_vimshrc_path = '~/.vim/vimshrc'
"" }}}
" }}}
