set nocompatible
filetype off

if has('vim_starting')
  set runtimepath+=~/.vim/bundle/neobundle.vim
endif

call neobundle#rc(expand('~/.vim/bundle/'))
NeoBundleFetch 'Shougo/neobundle.vim'
NeoBundle 'Shougo/vimproc', {
      \ 'build' : {
      \     'windows' : 'make -f make_mingw32.mak',
      \     'cygwin' : 'make -f make_cygwin.mak',
      \     'mac' : 'make -f make_mac.mak',
      \     'unix' : 'make -f make_unix.mak',
      \    },
      \ }
if has("lua")
  NeoBundleLazy 'Shougo/neocomplete', { 'autoload' : {
        \   'insert' : 1,
        \ }}
endif
NeoBundle 'thinca/vim-quickrun'
NeoBundle 'tyru/open-browser.vim'
NeoBundle 'othree/eregex.vim'
NeoBundle 'Shougo/unite.vim'
NeoBundle 'tpope/vim-rails'
NeoBundle 'scrooloose/nerdtree'
NeoBundle 'vim-scripts/kwbdi.vim'
NeoBundle 'scrooloose/nerdcommenter'

" syntax for vimperatorrc
NeoBundle 'superbrothers/vim-vimperator'

let mapleader = ","

" シンタックスハイライト有効、暗い背景用
"syntax on
set background=dark
filetype plugin indent on
filetype indent on
filetype plugin on

" Installation check.
NeoBundleCheck

" ruby
compiler ruby
let ruby_space_errors=1

" 行番号を表示
set number

" タブ・インデント設定
set tabstop=2
set shiftwidth=2
set expandtab
set autoindent
set cindent

" 検索
set ignorecase
set smartcase
set incsearch
set hlsearch

" 対応する括弧を強調
set showmatch

" バックアップファイルを作成しない
set nobackup

set visualbell
set t_vb = ""

" 自動改行しない
set textwidth=0

syntax enable

let g:quickrun_config = {}
let g:quickrun_config.markdown = {'outputter': 'browser'}

"" unite.vim {{{
" unite.vim keymap
nnoremap          <leader>u  :Unite -no-split<Space>
nnoremap <silent> <leader>f  :Unite<Space>buffer<CR>
nnoremap <silent> <leader>b  :Unite<Space>bookmark<CR>
nnoremap <silent> <leader>m  :Unite<Space>file_mru<CR>
nnoremap <silent> <leader>r  :UniteWithBufferDir file<CR>
nnoremap <silent> <leader>vr :UniteResume<CR>
"" }}}

"" kwbdi {{{
nmap <leader>d <Plug>Kwbd
"" }}}

"" NERDTree {{{
nmap <leader>t :NERDTreeToggle<CR>
"" }}}

"" neocomplete {{{
" Use neocomplete.
let g:neocomplete#enable_at_startup = 1
" Use smartcase.
let g:neocomplete#enable_smart_case = 1
" Set minimum syntax keyword length.
let g:neocomplete#auto_completion_start_length = 2
let g:neocomplete#manual_completion_start_length = 0
let g:neocomplete#sources#syntax#min_keyword_length = 3
let g:neocomplete#min_keyword_length = 2
let g:neocomplete#enable_prefetch = 1
" Define dictionary.
let g:neocomplete#sources#dictionary#dictionaries = {
      \ 'default' : '',
      \ 'ruby' : $HOME.'/dict/ruby.dict',
      \ }

" Define keyword.
if !exists('g:neocomplete#keyword_patterns')
  let g:neocomplete#keyword_patterns = {}
endif
let g:neocomplete#keyword_patterns['default'] = '\h\w*'

" Plugin key-mappings.
inoremap <expr><C-g>     neocomplete#undo_completion()
inoremap <expr><C-l>     neocomplete#complete_common_string()
" Recommended key-mappings.
" <CR>: close popup and save indent.
inoremap <silent> <CR> <C-r>=<SID>my_cr_function()<CR>
function! s:my_cr_function()
  return neocomplete#smart_close_popup() . "\<CR>"
  " For no inserting <CR> key.
  "return pumvisible() ? neocomplete#close_popup() : "\<CR>"
endfunction
" <TAB>: completion.
inoremap <expr><TAB>  pumvisible() ? "\<C-n>" : "\<TAB>"
" <C-h>, <BS>: close popup and delete backword char.
inoremap <expr><C-h> neocomplete#smart_close_popup()."\<C-h>"
inoremap <expr><BS> neocomplete#smart_close_popup()."\<C-h>"
inoremap <expr><C-y>  neocomplete#close_popup()
inoremap <expr><C-e>  neocomplete#cancel_popup()
" Close popup by <Space>.
"inoremap <expr><Space> pumvisible() ? neocomplete#close_popup() : "\<Space>"
"" }}}
