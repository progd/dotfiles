set encoding=utf-8
scriptencoding utf-8

" Initialize {{{
let s:is_windows = has('win16') || has('win32') || has('win64')
let s:is_cygwin = has('win32unix')
function! IsWindows()
  return s:is_windows
endfunction

function! IsMac()
  return !s:is_windows && !s:is_cygwin
        \ && (has('mac') || has('macunix') || has('gui_macvim') ||
        \   (!executable('xdg-open') &&
        \     system('uname') =~? '^darwin'))
endfunction

if &compatible
  set nocompatible
endif

augroup vimrc
  autocmd!
augroup END
" }}}

" NeoBundle configure {{{
if has('vim_starting')
  set runtimepath+=~/.vim/bundle/neobundle.vim/
endif

call neobundle#begin(expand('~/.vim_bundle'))

if neobundle#load_cache()
  NeoBundleFetch 'Shougo/neobundle.vim'

  call neobundle#load_toml('~/.vim/neobundle.toml')
  call neobundle#load_toml('~/.vim/neobundle_lazy.toml', {'lazy' : 1})
  NeoBundleSaveCache
endif

call neobundle#end()

filetype plugin indent on

" Installation check.
NeoBundleCheck
" }}}

" General settings {{{
let g:mapleader = ","

" シンタックスハイライト有効、暗い背景用
"syntax on
set background=dark

" カーソル行を強調表示
autocmd vimrc BufEnter * set cursorline
highlight CursorLine cterm=NONE ctermbg=DarkMagenta guibg=DarkMagenta

" 行番号を表示
set number

" ステータスライン
set laststatus=2

" タブ・インデント設定
set tabstop=4
set shiftwidth=4
set expandtab
set autoindent
set cindent

" 検索
set ignorecase
set smartcase
set incsearch
set hlsearch

" 対応する括弧を強調
set showmatch

" バックアップファイルを作成しない
set nobackup

set visualbell
set t_vb = ""

" 自動改行しない
set textwidth=0

" バックスペースでインデントや改行を削除できるようにする
set backspace=indent,eol,start

set showtabline=2

set swapfile
set directory=~/.vim/tmp

set backup
set backupdir=~/.vim/tmp

set undofile
set undodir=~/.vim/tmp

if executable('jvgrep')
  set grepprg=jvgrep
endif

syntax enable
" }}}

" Keymaps {{{
" emacs-like keybind {{{
noremap! <C-a>  <Home>
noremap! <C-e>  <End>
noremap! <C-b>  <Left>
noremap! <C-f>  <Right>
noremap! <C-d>  <Del>
noremap! <M-b>  <C-Left>
noremap! <M-f>  <C-Right>
noremap! <M-d>  <Del>
noremap! <C-g>  <Esc>
cnoremap <C-p>  <Up>
cnoremap <C-n>  <Down>
" }}}

" edit {{{
noremap L $
noremap H ^
nnoremap <leader>p "*p
" }}}

" tabs and windows {{{
nnoremap [tabwin] <Nop>
nmap     s [tabwin]
" window move-cursor
nnoremap          [tabwin]j     <C-w>j
nnoremap          [tabwin]k     <C-w>k
nnoremap          [tabwin]l     <C-w>l
nnoremap          [tabwin]h     <C-w>h
nnoremap          [tabwin]w     <C-w>w
" window moving
nnoremap          [tabwin]J     <C-w>J
nnoremap          [tabwin]K     <C-w>K
nnoremap          [tabwin]L     <C-w>L
nnoremap          [tabwin]H     <C-w>H
nnoremap          [tabwin]r     <C-w>r
" window resizing
nnoremap          [tabwin]=     <C-w>=
" window manipulating
nnoremap          [tabwin]o     <C-w>o
nnoremap <silent> [tabwin]s     :<C-u>split<CR>
nnoremap <silent> [tabwin]v     :<C-u>vsplit<CR>
nnoremap          [tabwin]T     <C-w>T
" tabpage changing
nnoremap          <C-TAB>       gt
nnoremap          <C-S-TAB>     gT
nnoremap          [tabwin]n     gt
nnoremap          [tabwin]p     gT
nnoremap <silent> [tabwin]t     :<C-u>tabnew<CR>
" tabpage moving
nnoremap <silent> [tabwin]v     :<C-u>tabmove<CR>
nnoremap <silent> [tabwin]N     :<C-u>tabmove +1<CR>
nnoremap <silent> [tabwin]P     :<C-u>tabmove -1<CR>
" misc
nnoremap <silent> [tabwin]q     :<C-u>q<CR>
nnoremap <silent> [tabwin]Q     :<C-u>q!<CR>
nnoremap <silent> [tabwin]d     :<C-u>bd<CR>
nnoremap <silent> [tabwin]D     :<C-u>bd!<CR>
" }}}

" search
nnoremap <leader>/ /<C-u>\V
" }}}

" Plugins {{{
if neobundle#tap('unite.vim') " {{{
  function! neobundle#hooks.on_source(bundle)
    call unite#custom#profile('default', 'context', {
          \ 'start_insert' : 1
          \ })
  endfunction

  if executable('jvgrep')
    " file_rec/async
    let g:unite_source_rec_async_command =
          \ ['jvgrep', '-l', '--no-color', '-l', '']
    " grep
    let g:unite_source_grep_command = 'jvgrep'
    let g:unite_source_grep_default_opts = '--exclude ''\.git'''
    let g:unite_source_grep_recursive_opt = '-R'
  elseif executable('ag')
    let g:unite_source_rec_async_command =
          \ ['ag', '--follow', '--nocolor', '--nogroup',
          \  '--hidden', '-g', '']
    let g:unite_source_grep_command = 'ag'
    let g:unite_source_grep_default_opts =
          \ '-i --vimgrep --hidden --ignore ' .
          \ '''.hg'' --ignore ''.svn'' --ignore ''.git'' --ignore ''.bzr'''
    let g:unite_source_grep_recursive_opt = ''
  endif

  nnoremap          <leader>u :<C-u>Unite -no-split<Space>
  nnoremap <silent> <leader>f :<C-u>Unite buffer<CR>
  nnoremap <silent> <leader>F :<C-u>Unite -buffer-name=bufferlist -toggle -winwidth=40 -vertical -no-quit -keep-focus -no-start-insert buffer<CR>
  nnoremap <silent> <leader>b :<C-u>Unite bookmark<CR>
  nnoremap <silent> <leader>r :<C-u>UniteWithBufferDir file<CR>
  nnoremap <silent> <leader>R :<C-u>UniteWithBufferDir file_rec/async<CR>
  nnoremap <silent> <leader>c :<C-u>UniteResume<CR>
  nnoremap <silent> <leader>h :<C-u>Unite help<CR>
  nnoremap <silent> <leader>g :<C-u>UniteWithBufferDir grep<CR>
  nnoremap <silent> <leader>G :<C-u>Unite grep<CR>
  nnoremap <silent> <leader>l :<C-u>Unite line<CR>

  call neobundle#untap()
endif " }}}

if neobundle#tap('unite-outline') " {{{
  nnoremap <silent> <leader>o  :<C-u>Unite -winwidth=40 -vertical -no-quit outline<CR>
  call neobundle#untap()
endif " }}}

if neobundle#tap('neomru.vim') " {{{
  nnoremap <silent> <leader>m  :<C-u>Unite<Space>file_mru<CR>
  call neobundle#untap()
endif " }}}

if neobundle#tap('vimfiler.vim') " {{{
  function! neobundle#hooks.on_source(bundle)
    call vimfiler#custom#profile('default', 'context', {
          \   'safe'        : 0,
          \ })
          "\   'edit_action' : 'tabopen',
    " vimfiler バッファをバッファリストに表示しない
    "autocmd vimrc FileType vimfiler setlocal nobuflisted
  endfunction

  " netrw.vim を無効にする
  let g:loaded_netrwPlugin = 1
  " デフォルトのファイルエクスプローラにする
  let g:vimfiler_as_default_explorer = 1

  nnoremap <silent> <leader>e  :<C-u>VimFilerBufferDir -buffer-name=filer -find -no-split -quit<CR>
  nnoremap <silent> <leader>t  :<C-u>VimFilerBufferDir -buffer-name=tree -winwidth=40 -split -explorer -toggle -no-quit<CR>
  call neobundle#untap()
endif " }}}

if neobundle#tap('neocomplete.vim') " {{{
  " Disable AutoComplPop.
  let g:acp_enableAtStartup = 0
  " Use neocomplete.
  let g:neocomplete#enable_at_startup = 1
  " Use smartcase.
  let g:neocomplete#enable_smart_case = 1
  " Set minimum syntax keyword length.
  let g:neocomplete#sources#syntax#min_keyword_length = 3
  let g:neocomplete#lock_buffer_name_pattern = '\*ku\*'

  " Define dictionary.
  let g:neocomplete#sources#dictionary#dictionaries = {
        \ 'default' : '',
        \ 'ruby' : $HOME.'/.neocomplete/dict/ruby.dict',
        \ }

  " Define keyword.
  if !exists('g:neocomplete#keyword_patterns')
    let g:neocomplete#keyword_patterns = {}
  endif
  let g:neocomplete#keyword_patterns['default'] = '\h\w*'

  " Plugin key-mappings.
  inoremap <expr><C-z>     neocomplete#undo_completion()
  inoremap <expr><C-l>     neocomplete#complete_common_string()

  " Recommended key-mappings.
  " <CR>: close popup and save indent.
  inoremap <silent> <CR> <C-r>=<SID>my_cr_function()<CR>
  function! s:my_cr_function()
    return (pumvisible() ? "\<C-y>" : "" ) . "\<CR>"
  endfunction
  " <TAB>: completion.
  inoremap <expr><TAB>  pumvisible() ? "\<C-n>" : "\<TAB>"
  " <C-h>, <BS>: close popup and delete backword char.
  inoremap <expr><C-h> neocomplete#smart_close_popup()."\<C-h>"
  inoremap <expr><BS> neocomplete#smart_close_popup()."\<C-h>"

  " Enable omni completion.
  autocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS
  autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
  autocmd FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS
  autocmd FileType python setlocal omnifunc=pythoncomplete#Complete
  autocmd FileType xml setlocal omnifunc=xmlcomplete#CompleteTags

  " Enable heavy omni completion.
  if !exists('g:neocomplete#sources#omni#input_patterns')
    let g:neocomplete#sources#omni#input_patterns = {}
  endif
  let g:neocomplete#sources#omni#input_patterns.php = '[^. \t]->\h\w*\|\h\w*::'
  let g:neocomplete#sources#omni#input_patterns.c = '[^.[:digit:] *\t]\%(\.\|->\)'
  let g:neocomplete#sources#omni#input_patterns.cpp = '[^.[:digit:] *\t]\%(\.\|->\)\|\h\w*::'

  " For perlomni.vim setting.
  " https://github.com/c9s/perlomni.vim
  let g:neocomplete#sources#omni#input_patterns.perl = '\h\w*->\h\w*\|\h\w*::'

  call neobundle#untap()
endif " }}}

if neobundle#tap('kwbdi.vim') " {{{
  nmap <leader>d <Plug>Kwbd
  call neobundle#untap()
endif " }}}

if neobundle#tap('vim-quickrun') " {{{
  nnoremap <silent> <leader>q :QuickRun -outputter/buffer/split ":botright 8sp"<CR>
  let g:quickrun_config = {
        \   '_': {
        \     'runner' : 'vimproc',
        \     'runner/vimproc/updatetime' : 60
        \   },
        \   'markdown' : {
        \       'type': 'pandoc',
        \       'outputter': 'browser'
        \   },
        \ }
  call neobundle#untap()
endif " }}}

if neobundle#tap('incsearch.vim') " {{{
  let g:incsearch#auto_nohlsearch = 0
  map /  <Plug>(incsearch-forward)
  map ?  <Plug>(incsearch-backward)
  map g/ <Plug>(incsearch-stay)
  map n  <Plug>(incsearch-nohl-n)
  map N  <Plug>(incsearch-nohl-N)
  map *  <Plug>(incsearch-nohl-*)
  map #  <Plug>(incsearch-nohl-#)
  map g* <Plug>(incsearch-nohl-g*)
  map g# <Plug>(incsearch-nohl-g#)
  nnoremap <silent> <Esc><Esc> :nohlsearch<CR>
  call neobundle#untap()
endif " }}}

if neobundle#tap('vim-brightest') " {{{
  let g:brightest#highlight = { "group" : "BrightestUnderline" }
  call neobundle#untap()
endif " }}}

if neobundle#is_sourced('lightline.vim') " {{{
  let g:lightline = {
        \ 'colorscheme': 'Tomorrow',
        \ }
  set noshowmode

  call neobundle#untap()
endif " }}}

if neobundle#tap('qfixhowm') " {{{
  " キーマップリーダー
  let QFixHowm_Key = 'g'

  " howm_dirはファイルを保存したいディレクトリを設定
  let howm_dir             = '~/Documents/howm'
  let howm_filename        = '%Y-%m-%d/%Y-%m-%d-%H%M%S.txt'
  let howm_fileencoding    = 'utf8'
  let howm_fileformat      = 'dos'
  let QFixHowm_FoldingPattern = '^[=.*[]'
endif " }}}

if neobundle#tap('vim-easy-align') " {{{
  " Start interactive EasyAlign in visual mode (e.g. vip,a)
  vmap <leader>a <Plug>(EasyAlign)
  " Start interactive EasyAlign for a motion/text object (e.g. ,aip)
  nmap <leader>a <Plug>(EasyAlign)
endif " }}}
" }}}

if has('gui_running') " {{{
  if neobundle#tap('vim-singleton')
    if has('clientserver')
      call singleton#enable()
    endif
  endif

  " load all lazy plugins
  NeoBundleSource
endif " }}}
